<?xml version="1.0" encoding="UTF-8"?>
<dao xmlns="http://jelix.org/ns/dao/1.0">
    <datasources>
        <primarytable name="parcelle_info" realname="parcelle_info" primarykey="ogc_fid" />
    </datasources>
    <record>
        <property name="ogc_fid" fieldname="ogc_fid" datatype="integer" required="true"/>
        <property name="geo_parcelle" fieldname="geo_parcelle" datatype="text" required="true"/>
        <property name="idu" fieldname="idu" datatype="text"/>
        <property name="tex" fieldname="tex" datatype="text"/>
        <property name="geo_section" fieldname="geo_section" datatype="text" required="true"/>
        <property name="nomcommune" fieldname="nomcommune" datatype="text"/>
        <property name="codecommune" fieldname="codecommune" datatype="text"/>
        <property name="adresse" fieldname="adresse" datatype="text"/>
        <property name="code" fieldname="code" datatype="text"/>
        <property name="comptecommunal" fieldname="comptecommunal" datatype="text" required="true"/>
        <property name="voie" fieldname="voie" datatype="text" required="true"/>
        <property name="proprietaire" fieldname="proprietaire" datatype="text"/>
        <property name="lot" fieldname="lot" datatype="text"/>
        <property name="name" fieldname="name" datatype="text" required="true"
                  selectpattern="parcelle_info.codecommune || ' - ' || CASE WHEN substr(parcelle_info.idu,4,3) != '000' THEN substr(parcelle_info.idu,4,3) || ' - ' ELSE '' END || substr(parcelle_info.idu,7,6)"/>
        <property name="geom" fieldname="geom" datatype="text" required="true" selectpattern="ST_AsText(parcelle_info.geom)"/>
        <!--<property name="" fieldname="" datatype="string/int/float/date"
        required="yes" maxlength="" minlength="" regexp="" sequence=""
        updatepattern="" insertpattern="" selectpattern=""/>-->
    </record>
    <factory>
        <method name="findBySection" type="select">
            <parameter name="geo_section" />
            <conditions logic="and">
                <eq property="geo_section" expr="$geo_section" />
            </conditions>
            <order>
                <orderitem property="name" way="asc" />
            </order>
        </method>

        <method name="findByVoie" type="select">
            <parameter name="voie" />
            <conditions logic="and">
                <eq property="voie" expr="$voie" />
            </conditions>
            <order>
                <orderitem property="name" way="asc" />
            </order>
        </method>

        <method name="findByProprietaire" type="select">
            <parameter name="comptecommunal" />
            <conditions logic="and">
                <eq property="comptecommunal" expr="$comptecommunal" />
            </conditions>
            <order>
                <orderitem property="name" way="asc" />
            </order>
        </method>

        <method type="php" name="findByConditions">
            <parameter name="layerConditions" />
            <parameter name="searchConditions" />

            <body><![CDATA[
            $sql = $this->_selectClause . $this->_fromClause . $this->_whereClause;

            if ($layerConditions || $searchConditions->hasConditions()) {
                $sql.= ($this->_whereClause == ''?' WHERE ':' AND ');
            }

            if ($layerConditions) {
                $sql.= '('. $layerConditions .')';
            }

            if ($searchConditions->hasConditions()) {
                if ($layerConditions) {
                    $sql.= ' AND ';
                }
                $sql.= '('. $this->_createConditionsClause($searchConditions) .')';
            }

            $sql.= $this->_createOrderClause($searchConditions);

            $rs = $this->_conn->query($sql);
            $rs->setFetchMode(8,$this->_DaoRecordClassName);
            return $rs;
            ]]></body>
        </method>

        <method type="php" name="findParcelleByLieu">
            <parameter name="geo_section" />
            <parameter name="voie" />
            <parameter name="condition" />
            <body><![CDATA[

            $sql = $this->_selectClause . $this->_fromClause . $this->_whereClause;
            $sql.= ($this->_whereClause == ''?' WHERE ':' AND ');
            $sql.= ' (';
            $sql.= ' geo_section = ' . $this->_prepareValue($geo_section,'string');
            $sql.= ' OR voie = ' . $this->_prepareValue($voie,'string');
            $sql.= ' )';

            if ($condition) {
                $sql.= ' AND ('. $condition .')';
            }

            $sql.= ' ORDER BY geo_parcelle';

            $rs = $this->_conn->query($sql);
            $rs->setFetchMode(8,$this->_DaoRecordClassName);
            return $rs;
            ]]></body>
        </method>

        <method type="php" name="findParcelleByProp">
            <parameter name="comptecommunal" />
            <parameter name="condition" />

            <body><![CDATA[

            $cc = explode(',', $comptecommunal);

            $sql = $this->_selectClause . $this->_fromClause . $this->_whereClause;
            $sql.= ($this->_whereClause == ''?' WHERE ':' AND ');
            $sql.= ' (';
            $or = '';
            foreach($cc as $c){
                $sql.= $or . ' comptecommunal = ' . $this->_prepareValue(trim($c),'string');
                $or = ' OR ';
            }
            $sql.= ' )';

            if ($condition) {
                $sql.= ' AND ('. $condition .')';
            }

            $sql.= ' ORDER BY geo_parcelle';

            $rs = $this->_conn->query($sql);
            $rs->setFetchMode(8,$this->_DaoRecordClassName);
            return $rs;
            ]]></body>
        </method>


        <method type="php" name="findByFieldIn">
            <parameter name="field" />
            <parameter name="value" />
            <parameter name="condition" />

            <body><![CDATA[
            $sql = $this->_selectClause . $this->_fromClause . $this->_whereClause;
            $sql.= ($this->_whereClause == ''?' WHERE ':' AND ');

            if (is_array($value)) {
              $preparedValues = array();
              foreach($value as $v) {
                $preparedValues[] = $this->_prepareValue(trim($v),'string');
              }
              $sql.= '"'.$field.'" IN ('.implode(', ', $preparedValues).', '.$this->_prepareValue('all','string').')';
            } else if (is_string($value) || is_numeric($value)) {
                $sql.= '"'.$field.'" IN ('.$this->_prepareValue(trim($value),'string').', '.$this->_prepareValue('all','string').')';
            } else {
                $sql.= '"'.$field.'" = '.$this->_prepareValue('all','string');
            }

            if ($condition) {
                $sql.= ' AND ('. $condition .')';
            }

            $sql.= ' ORDER BY name';

            $rs = $this->_conn->query($sql);
            $rs->setFetchMode(8,$this->_DaoRecordClassName);
            return $rs;
            ]]></body>
        </method>

        <method type="php" name="findBySectionAndFieldIn">
            <parameter name="geo_section" />
            <parameter name="field" />
            <parameter name="value" />

            <body><![CDATA[
            $sql = $this->_selectClause . $this->_fromClause . $this->_whereClause;
            $sql.= ($this->_whereClause == ''?' WHERE ':' AND ');

            $sql.= ' geo_section = '.$this->_prepareValue(trim($geo_section),'string');
            $sql.= ' AND ';

            if (is_array($value)) {
              $preparedValues = array();
              foreach($value as $v) {
                $preparedValues[] = $this->_prepareValue(trim($v),'string');
              }
              $sql.= '"'.$field.'" IN ('.implode(', ', $preparedValues).', '.$this->_prepareValue('all','string').')';
            } else if (is_string($value) || is_numeric($value)) {
                $sql.= '"'.$field.'" IN ('.$this->_prepareValue(trim($value),'string').', '.$this->_prepareValue('all','string').')';
            } else {
                $sql.= '"'.$field.'" = '.$this->_prepareValue('all','string');
            }

            $sql.= ' ORDER BY name';

            $rs = $this->_conn->query($sql);
            $rs->setFetchMode(8,$this->_DaoRecordClassName);
            return $rs;
            ]]></body>
        </method>

        <method type="php" name="findByVoieAndFieldIn">
            <parameter name="voie" />
            <parameter name="field" />
            <parameter name="value" />

            <body><![CDATA[
            $sql = $this->_selectClause . $this->_fromClause . $this->_whereClause;
            $sql.= ($this->_whereClause == ''?' WHERE ':' AND ');

            $sql.= ' voie = '.$this->_prepareValue(trim($voie),'string');
            $sql.= ' AND ';

            if (is_array($value)) {
              $preparedValues = array();
              foreach($value as $v) {
                $preparedValues[] = $this->_prepareValue(trim($v),'string');
              }
              $sql.= '"'.$field.'" IN ('.implode(', ', $preparedValues).', '.$this->_prepareValue('all','string').')';
            } else if (is_string($value) || is_numeric($value)) {
                $sql.= '"'.$field.'" IN ('.$this->_prepareValue(trim($value),'string').', '.$this->_prepareValue('all','string').')';
            } else {
                $sql.= '"'.$field.'" = '.$this->_prepareValue('all','string');
            }

            $sql.= ' ORDER BY name';

            $rs = $this->_conn->query($sql);
            $rs->setFetchMode(8,$this->_DaoRecordClassName);
            return $rs;
            ]]></body>
        </method>

        <method type="php" name="findByProprietaireAndFieldIn">
            <parameter name="comptecommunal" />
            <parameter name="field" />
            <parameter name="value" />

            <body><![CDATA[
            $sql = $this->_selectClause . $this->_fromClause . $this->_whereClause;
            $sql.= ($this->_whereClause == ''?' WHERE ':' AND ');

            $sql.= ' comptecommunal = '.$this->_prepareValue(trim($comptecommunal),'string');
            $sql.= ' AND ';

            if (is_array($value)) {
              $preparedValues = array();
              foreach($value as $v) {
                $preparedValues[] = $this->_prepareValue(trim($v),'string');
              }
              $sql.= '"'.$field.'" IN ('.implode(', ', $preparedValues).', '.$this->_prepareValue('all','string').')';
            } else if (is_string($value) || is_numeric($value)) {
                $sql.= '"'.$field.'" IN ('.$this->_prepareValue(trim($value),'string').', '.$this->_prepareValue('all','string').')';
            } else {
                $sql.= '"'.$field.'" = '.$this->_prepareValue('all','string');
            }

            $sql.= ' ORDER BY name';

            $rs = $this->_conn->query($sql);
            $rs->setFetchMode(8,$this->_DaoRecordClassName);
            return $rs;
            ]]></body>
        </method>

        <method type="php" name="findParcelleByLieuAndFieldIn">
            <parameter name="geo_section" />
            <parameter name="voie" />
            <parameter name="field" />
            <parameter name="value" />
            <body><![CDATA[

            $sql = $this->_selectClause . $this->_fromClause . $this->_whereClause;
            $sql.= ($this->_whereClause == ''?' WHERE ':' AND ');

            $sql.= ' (';
            $sql.= ' geo_section = ' . $this->_prepareValue($geo_section,'string');
            $sql.= ' OR voie = ' . $this->_prepareValue($voie,'string');
            $sql.= ' )';

            $sql.= ' AND ';

            if (is_array($value)) {
              $preparedValues = array();
              foreach($value as $v) {
                $preparedValues[] = $this->_prepareValue(trim($v),'string');
              }
              $sql.= '"'.$field.'" IN ('.implode(', ', $preparedValues).', '.$this->_prepareValue('all','string').')';
            } else if (is_string($value) || is_numeric($value)) {
                $sql.= '"'.$field.'" IN ('.$this->_prepareValue(trim($value),'string').', '.$this->_prepareValue('all','string').')';
            } else {
                $sql.= '"'.$field.'" = '.$this->_prepareValue('all','string');
            }

            $sql.= ' ORDER BY geo_parcelle';

            $rs = $this->_conn->query($sql);
            $rs->setFetchMode(8,$this->_DaoRecordClassName);
            return $rs;
            ]]></body>
        </method>

        <method type="php" name="findParcelleByPropAndFieldIn">
            <parameter name="comptecommunal" />
            <parameter name="field" />
            <parameter name="value" />
            <parameter name="condition" />

            <body><![CDATA[

            $cc = explode(',', $comptecommunal);

            $sql = $this->_selectClause . $this->_fromClause . $this->_whereClause;
            $sql.= ($this->_whereClause == ''?' WHERE ':' AND ');

            $sql.= ' (';
            $or = '';
            foreach($cc as $c){
                $sql.= $or . ' comptecommunal = ' . $this->_prepareValue(trim($c),'string');
                $or = ' OR ';
            }
            $sql.= ' )';

            $sql.= ' AND ';

            if (is_array($value)) {
              $preparedValues = array();
              foreach($value as $v) {
                $preparedValues[] = $this->_prepareValue(trim($v),'string');
              }
              $sql.= '"'.$field.'" IN ('.implode(', ', $preparedValues).', '.$this->_prepareValue('all','string').')';
            } else if (is_string($value) || is_numeric($value)) {
                $sql.= '"'.$field.'" IN ('.$this->_prepareValue(trim($value),'string').', '.$this->_prepareValue('all','string').')';
            } else {
                $sql.= '"'.$field.'" = '.$this->_prepareValue('all','string');
            }

            if ($condition) {
                $sql.= ' AND ('. $condition .')';
            }

            $sql.= ' ORDER BY geo_parcelle';

            $rs = $this->_conn->query($sql);
            $rs->setFetchMode(8,$this->_DaoRecordClassName);
            return $rs;
            ]]></body>
        </method>


        <method type="php" name="findBySpatialIntersection">
            <parameter name="layerConditions" />
            <parameter name="searchConditions" />
            <parameter name="spatialLayerSchema" />
            <parameter name="spatialLayerTable" />
            <parameter name="spatialLayerPk" />
            <parameter name="spatialLayerSelectedIds" />
            <parameter name="spatialLayerField" />
            <parameter name="spatialLayerBuffer" />
            <parameter name="spatialLayerGeometry" />
            <parameter name="spatialLayerGeometryType" />

            <body><![CDATA[
            $sql = $this->_selectClause;
            if (!empty($spatialLayerField)) {
                $sql .= ' , i."' . trim($spatialLayerField, " '\n\r\t\v\x00") . '"';
            }

            $sql .= $this->_fromClause;

            // Filtre des identifiants sélectionnés dans la couche de croisement
            if (count($spatialLayerSelectedIds) > 0) {
                $sqlIds .= '"' . trim($spatialLayerPk, " '\n\r\t\v\x00") . '" IN (';
                $virg = '';
                foreach($spatialLayerSelectedIds as $v) {
                    $sqlIds .= $virg . $this->_prepareValue(trim($v), 'string');
                    $virg = ', ';
                }
                $sqlIds .= ' ) ';
            } else {
                $sqlIds = '"' . trim($spatialLayerPk, " '\n\r\t\v\x00") . '" IN (\'-999999\')' ;
            }

            // En fonction du type de géométrie, on utilise soit une jointure directe, soit une sous-requête avec ST_Subdivide
            if (!in_array(strtoupper($spatialLayerGeometryType), array('LINESTRING', 'MULTILINESTRING', 'POLYGON', 'MULTIPOLYGON'))) {
                // Simple jointure en incluant le filtre spatial et le filtre par identifiants sélectionnés
                $sql .= ' JOIN "' . $spatialLayerSchema . '"."' . $spatialLayerTable . '" AS i';
                $sql .= ' ON ST_DWithin(i."' . $spatialLayerGeometry . '", "parcelle_info".geom, ' . $this->_prepareValue($spatialLayerBuffer,'string') .')';
                if (count($spatialLayerSelectedIds) > 0) {
                    $sql .= ' AND i.' . $sqlIds;
                }
            } else {
                // Utilisation d'une sous-requête dans la jointure pour subdiviser les géométries
                $sql .= ' JOIN ( ';
                $sql .= ' SELECT a."' . trim($spatialLayerPk, " '\n\r\t\v\x00") . '", ST_Subdivide(a."' . $spatialLayerGeometry . '") AS geom';
                if (!empty($spatialLayerField)) {
                    $sql .= ' , "' . trim($spatialLayerField, " '\n\r\t\v\x00") . '"';
                }
                $sql .= ' FROM "' . $spatialLayerSchema . '"."' . $spatialLayerTable . '" AS a';
                $sql .= ' WHERE True';
                if (count($spatialLayerSelectedIds) > 0) {
                    $sql .= ' AND a.' . $sqlIds;
                }
                $sql .= ' ) AS i';
                $sql .= ' ON ST_DWithin(i.geom, "parcelle_info".geom, ' . $this->_prepareValue($spatialLayerBuffer,'string') .')';
            }

            $sql .= $this->_whereClause;

            if ($layerConditions || $searchConditions->hasConditions()) {
                $sql.= ($this->_whereClause == ''?' WHERE ':' AND ');
            }

            if ($layerConditions) {
                $sql.= '('. $layerConditions .')';
            }

            if ($searchConditions->hasConditions()) {
                if ($layerConditions) {
                    $sql.= ' AND ';
                }
                $sql.= '('. $this->_createConditionsClause($searchConditions) .')';
            }

            $sql.= $this->_createOrderClause($searchConditions);

            $rs = $this->_conn->query($sql);
            $rs->setFetchMode(8,$this->_DaoRecordClassName);
            return $rs;
            ]]></body>
        </method>

    </factory>
</dao>
