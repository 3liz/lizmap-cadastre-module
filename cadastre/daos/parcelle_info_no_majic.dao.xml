<?xml version="1.0" encoding="UTF-8"?>
<dao xmlns="http://jelix.org/ns/dao/1.0">
    <datasources>
        <primarytable name="parcelle_info" realname="parcelle_info" primarykey="ogc_fid" />
    </datasources>
    <record>
        <property name="ogc_fid" fieldname="ogc_fid" datatype="integer" required="true"/>
        <property name="geo_parcelle" fieldname="geo_parcelle" datatype="text" required="true"/>
        <property name="geo_section" fieldname="geo_section" datatype="text" required="true"/>
        <property name="name" fieldname="idu" datatype="text" required="true" selectpattern="codecommune || ' - ' || substr(idu,7,6)"/>
        <property name="geom" fieldname="geom" datatype="text" required="true" selectpattern="ST_AsText(geom)"/>
        <!--<property name="" fieldname="" datatype="string/int/float/date"
        required="yes" maxlength="" minlength="" regexp="" sequence=""
        updatepattern="" insertpattern="" selectpattern=""/>-->
    </record>
    <factory>
        <method name="findBySection" type="select">
            <parameter name="geo_section" />
            <conditions logic="and">
                <eq property="geo_section" expr="$geo_section" />
            </conditions>
            <order>
                <orderitem property="name" way="asc" />
            </order>
        </method>


        <method type="php" name="findByFieldIn">
            <parameter name="field" />
            <parameter name="value" />

            <body><![CDATA[
            $sql = $this->_selectClause . $this->_fromClause . $this->_whereClause;
            $sql.= ($this->_whereClause == ''?' WHERE ':' AND ');

            if (is_array($value)) {
              $preparedValues = array();
              foreach($value as $v) {
                $preparedValues[] = $this->_prepareValue(trim($v),'string');
              }
              $sql.= '"'.$field.'" IN ('.implode(', ', $preparedValues).', '.$this->_prepareValue('all','string').')';
            } else if (is_string($value) || is_numeric($value)) {
                $sql.= '"'.$field.'" IN ('.$this->_prepareValue(trim($value),'string').', '.$this->_prepareValue('all','string').')';
            } else {
                $sql.= '"'.$field.'" = '.$this->_prepareValue('all','string');
            }

            $sql.= ' ORDER BY name';

            $rs = $this->_conn->query($sql);
            $rs->setFetchMode(8,$this->_DaoRecordClassName);
            return $rs;
            ]]></body>
        </method>

        <method type="php" name="findBySectionAndFieldIn">
            <parameter name="geo_section" />
            <parameter name="field" />
            <parameter name="value" />

            <body><![CDATA[
            $sql = $this->_selectClause . $this->_fromClause . $this->_whereClause;
            $sql.= ($this->_whereClause == ''?' WHERE ':' AND ');

            $sql.= ' geo_section = '.$this->_prepareValue(trim($geo_section),'string');
            $sql.= ' AND ';

            if (is_array($value)) {
              $preparedValues = array();
              foreach($value as $v) {
                $preparedValues[] = $this->_prepareValue(trim($v),'string');
              }
              $sql.= '"'.$field.'" IN ('.implode(', ', $preparedValues).', '.$this->_prepareValue('all','string').')';
            } else if (is_string($value) || is_numeric($value)) {
                $sql.= '"'.$field.'" IN ('.$this->_prepareValue(trim($value),'string').', '.$this->_prepareValue('all','string').')';
            } else {
                $sql.= '"'.$field.'" = '.$this->_prepareValue('all','string');
            }

            $sql.= ' ORDER BY name';

            $rs = $this->_conn->query($sql);
            $rs->setFetchMode(8,$this->_DaoRecordClassName);
            return $rs;
            ]]></body>
        </method>

    </factory>
</dao>
